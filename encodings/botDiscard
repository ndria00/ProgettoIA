%discard or not discard a card in your hand
discard(ID) | nonDiscard(ID) :- card(ID, _, _, _).


%try to compute the distance between a play and the card so to avoid discarding a card that
%can probably be attached to a play within the next few rounds
distance(ID, D) :- card(ID, S, N, V), ladder(L), card (ID1, S1, N1, V1), &last(L; ID1), S = S1, V > V1, D = V - V1.
distance(ID, D) :- card(ID, S, N, V), ladder(L), card (ID1, S1, N1, V1), &head(L; ID1), S = S1, V1 > V, D = V1 - V.

%existsDistanceForCard(ID) :- distance(ID, _).
minimumDistance(ID, DMIN) :- card (ID, S, N, V), existsDistanceForCard(ID, _), #min{D : distance(ID, D)} = DMIN.

:~ discard(ID), minimumDistance(ID, DMIN). [DMIN@1]

%if you have  two cards of the same suite and number discard one of these
:~ card(ID, S, N, _), card(ID1, S, N, _), ID<ID1, nonDiscard(ID), nonDiscard(ID1). [200@1]

% do not discard a card if you have two of the same number and different suite
% because they are likely to form a combination in the future
:~ discard(ID), card(ID, S, N, _), card(ID1, S1, N, _), S != S1, ID < ID1. [1@1]

totalPoints(X) :- #count{V, ID : card(ID, _, _, V)} = X.
:~ notOpened, totalPoints(X), V = 13 * 13 - X. [V@2]

:~ discard(ID), ID = 105. [1@3]
:~ discard(ID), ID = 106. [1@3]

%discard exactly one card
:- #count{ID : discard(ID)}!=1.